name: "Build containers: Fedora Kinoite (41)"

env:
  IMAGE: 'quay.io/fedora-ostree-desktops/kinoite'
  RELEASE: '41'
  NAME: 'Fedora Kinoite (41)'
  REGISTRY: 'quay.io/travier'
  DESTINATION: 'fedora-kinoite-sysexts'
  PR: ${{ github.event_name == 'pull_request' }}

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  schedule:
    - cron:  '0 0 * * MON'
  workflow_dispatch:

permissions: read-all

# Prevent multiple workflow runs from racing to ensure that pushes are made
# sequentialy for the main branch. Also cancel in progress workflow runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.sysext }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Reclaim disk space
        run: |
          sudo docker image prune --all --force
          sudo rm -rf "/usr/local/lib/android"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: "Mark directory as safe"
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --no-tags --prune --depth=1 origin +refs/heads/main:refs/remotes/origin/main

      - name: "Checking if we need to build container: 1password-cli"
        id: check-1password-cli
        env:
          SYSEXT: 1password-cli
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: 1password-cli"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-1password-cli.outputs.BUILD == 'true')
        with:
          context: '1password-cli'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.1password-cli
          containerfiles: '1password-cli/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: 1password-gui"
        id: check-1password-gui
        env:
          SYSEXT: 1password-gui
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: 1password-gui"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-1password-gui.outputs.BUILD == 'true')
        with:
          context: '1password-gui'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.1password-gui
          containerfiles: '1password-gui/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: btop"
        id: check-btop
        env:
          SYSEXT: btop
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: btop"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-btop.outputs.BUILD == 'true')
        with:
          context: 'btop'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.btop
          containerfiles: 'btop/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: chromium"
        id: check-chromium
        env:
          SYSEXT: chromium
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: chromium"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-chromium.outputs.BUILD == 'true')
        with:
          context: 'chromium'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.chromium
          containerfiles: 'chromium/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: compsize"
        id: check-compsize
        env:
          SYSEXT: compsize
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: compsize"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-compsize.outputs.BUILD == 'true')
        with:
          context: 'compsize'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.compsize
          containerfiles: 'compsize/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: cups-drivers"
        id: check-cups-drivers
        env:
          SYSEXT: cups-drivers
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: cups-drivers"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-cups-drivers.outputs.BUILD == 'true')
        with:
          context: 'cups-drivers'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.cups-drivers
          containerfiles: 'cups-drivers/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: distrobox"
        id: check-distrobox
        env:
          SYSEXT: distrobox
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: distrobox"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-distrobox.outputs.BUILD == 'true')
        with:
          context: 'distrobox'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.distrobox
          containerfiles: 'distrobox/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: docker-ce"
        id: check-docker-ce
        env:
          SYSEXT: docker-ce
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: docker-ce"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-docker-ce.outputs.BUILD == 'true')
        with:
          context: 'docker-ce'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.docker-ce
          containerfiles: 'docker-ce/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: emacs"
        id: check-emacs
        env:
          SYSEXT: emacs
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: emacs"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-emacs.outputs.BUILD == 'true')
        with:
          context: 'emacs'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.emacs
          containerfiles: 'emacs/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: erofs-utils"
        id: check-erofs-utils
        env:
          SYSEXT: erofs-utils
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: erofs-utils"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-erofs-utils.outputs.BUILD == 'true')
        with:
          context: 'erofs-utils'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.erofs-utils
          containerfiles: 'erofs-utils/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: fuse2"
        id: check-fuse2
        env:
          SYSEXT: fuse2
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: fuse2"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-fuse2.outputs.BUILD == 'true')
        with:
          context: 'fuse2'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.fuse2
          containerfiles: 'fuse2/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: gdb"
        id: check-gdb
        env:
          SYSEXT: gdb
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: gdb"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-gdb.outputs.BUILD == 'true')
        with:
          context: 'gdb'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.gdb
          containerfiles: 'gdb/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: git-tools"
        id: check-git-tools
        env:
          SYSEXT: git-tools
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: git-tools"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-git-tools.outputs.BUILD == 'true')
        with:
          context: 'git-tools'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.git-tools
          containerfiles: 'git-tools/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: google-chrome"
        id: check-google-chrome
        env:
          SYSEXT: google-chrome
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: google-chrome"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-google-chrome.outputs.BUILD == 'true')
        with:
          context: 'google-chrome'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.google-chrome
          containerfiles: 'google-chrome/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: htop"
        id: check-htop
        env:
          SYSEXT: htop
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: htop"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-htop.outputs.BUILD == 'true')
        with:
          context: 'htop'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.htop
          containerfiles: 'htop/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: incus"
        id: check-incus
        env:
          SYSEXT: incus
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: incus"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-incus.outputs.BUILD == 'true')
        with:
          context: 'incus'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.incus
          containerfiles: 'incus/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: iwd"
        id: check-iwd
        env:
          SYSEXT: iwd
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: iwd"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-iwd.outputs.BUILD == 'true')
        with:
          context: 'iwd'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.iwd
          containerfiles: 'iwd/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: just"
        id: check-just
        env:
          SYSEXT: just
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: just"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-just.outputs.BUILD == 'true')
        with:
          context: 'just'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.just
          containerfiles: 'just/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: keepassxc"
        id: check-keepassxc
        env:
          SYSEXT: keepassxc
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: keepassxc"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-keepassxc.outputs.BUILD == 'true')
        with:
          context: 'keepassxc'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.keepassxc
          containerfiles: 'keepassxc/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: krb5-workstation"
        id: check-krb5-workstation
        env:
          SYSEXT: krb5-workstation
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: krb5-workstation"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-krb5-workstation.outputs.BUILD == 'true')
        with:
          context: 'krb5-workstation'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.krb5-workstation
          containerfiles: 'krb5-workstation/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: libvirtd-desktop"
        id: check-libvirtd-desktop
        env:
          SYSEXT: libvirtd-desktop
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: libvirtd-desktop"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-libvirtd-desktop.outputs.BUILD == 'true')
        with:
          context: 'libvirtd-desktop'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.libvirtd-desktop
          containerfiles: 'libvirtd-desktop/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: microsoft-edge"
        id: check-microsoft-edge
        env:
          SYSEXT: microsoft-edge
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: microsoft-edge"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-microsoft-edge.outputs.BUILD == 'true')
        with:
          context: 'microsoft-edge'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.microsoft-edge
          containerfiles: 'microsoft-edge/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: moby-engine"
        id: check-moby-engine
        env:
          SYSEXT: moby-engine
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: moby-engine"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-moby-engine.outputs.BUILD == 'true')
        with:
          context: 'moby-engine'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.moby-engine
          containerfiles: 'moby-engine/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: monitoring"
        id: check-monitoring
        env:
          SYSEXT: monitoring
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: monitoring"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-monitoring.outputs.BUILD == 'true')
        with:
          context: 'monitoring'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.monitoring
          containerfiles: 'monitoring/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: mullvad-vpn"
        id: check-mullvad-vpn
        env:
          SYSEXT: mullvad-vpn
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: mullvad-vpn"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-mullvad-vpn.outputs.BUILD == 'true')
        with:
          context: 'mullvad-vpn'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.mullvad-vpn
          containerfiles: 'mullvad-vpn/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: neovim"
        id: check-neovim
        env:
          SYSEXT: neovim
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: neovim"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-neovim.outputs.BUILD == 'true')
        with:
          context: 'neovim'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.neovim
          containerfiles: 'neovim/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: openh264"
        id: check-openh264
        env:
          SYSEXT: openh264
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: openh264"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-openh264.outputs.BUILD == 'true')
        with:
          context: 'openh264'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.openh264
          containerfiles: 'openh264/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: ripgrep"
        id: check-ripgrep
        env:
          SYSEXT: ripgrep
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: ripgrep"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-ripgrep.outputs.BUILD == 'true')
        with:
          context: 'ripgrep'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.ripgrep
          containerfiles: 'ripgrep/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: steam-devices"
        id: check-steam-devices
        env:
          SYSEXT: steam-devices
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: steam-devices"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-steam-devices.outputs.BUILD == 'true')
        with:
          context: 'steam-devices'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.steam-devices
          containerfiles: 'steam-devices/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: steam"
        id: check-steam
        env:
          SYSEXT: steam
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: steam"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-steam.outputs.BUILD == 'true')
        with:
          context: 'steam'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.steam
          containerfiles: 'steam/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: strace"
        id: check-strace
        env:
          SYSEXT: strace
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: strace"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-strace.outputs.BUILD == 'true')
        with:
          context: 'strace'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.strace
          containerfiles: 'strace/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: tree"
        id: check-tree
        env:
          SYSEXT: tree
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: tree"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-tree.outputs.BUILD == 'true')
        with:
          context: 'tree'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.tree
          containerfiles: 'tree/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: vim"
        id: check-vim
        env:
          SYSEXT: vim
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: vim"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-vim.outputs.BUILD == 'true')
        with:
          context: 'vim'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.vim
          containerfiles: 'vim/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: vscode"
        id: check-vscode
        env:
          SYSEXT: vscode
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: vscode"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-vscode.outputs.BUILD == 'true')
        with:
          context: 'vscode'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.vscode
          containerfiles: 'vscode/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: vscodium"
        id: check-vscodium
        env:
          SYSEXT: vscodium
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: vscodium"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-vscodium.outputs.BUILD == 'true')
        with:
          context: 'vscodium'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.vscodium
          containerfiles: 'vscodium/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: wireguard-tools"
        id: check-wireguard-tools
        env:
          SYSEXT: wireguard-tools
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: wireguard-tools"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-wireguard-tools.outputs.BUILD == 'true')
        with:
          context: 'wireguard-tools'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.wireguard-tools
          containerfiles: 'wireguard-tools/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: wireshark"
        id: check-wireshark
        env:
          SYSEXT: wireshark
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: wireshark"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-wireshark.outputs.BUILD == 'true')
        with:
          context: 'wireshark'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.wireshark
          containerfiles: 'wireshark/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: zoxide"
        id: check-zoxide
        env:
          SYSEXT: zoxide
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: zoxide"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-zoxide.outputs.BUILD == 'true')
        with:
          context: 'zoxide'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.zoxide
          containerfiles: 'zoxide/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: zsh"
        id: check-zsh
        env:
          SYSEXT: zsh
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
                  exit 0
              fi
          fi
          echo "BUILD=true" >> "$GITHUB_OUTPUT"

      - name: "Build container: zsh"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-zsh.outputs.BUILD == 'true')
        with:
          context: 'zsh'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.zsh
          containerfiles: 'zsh/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: Login to Container Registry
        uses: redhat-actions/podman-login@v1
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}

      - uses: sigstore/cosign-installer@v3.7.0
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'

      - name: "Push container: 1password-cli"
        uses: redhat-actions/push-to-registry@v2
        id: push-1password-cli
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.1password-cli

      - name: "Sign container: 1password-cli"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-1password-cli.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: 1password-gui"
        uses: redhat-actions/push-to-registry@v2
        id: push-1password-gui
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.1password-gui

      - name: "Sign container: 1password-gui"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-1password-gui.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: btop"
        uses: redhat-actions/push-to-registry@v2
        id: push-btop
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.btop

      - name: "Sign container: btop"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-btop.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: chromium"
        uses: redhat-actions/push-to-registry@v2
        id: push-chromium
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.chromium

      - name: "Sign container: chromium"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-chromium.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: compsize"
        uses: redhat-actions/push-to-registry@v2
        id: push-compsize
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.compsize

      - name: "Sign container: compsize"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-compsize.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: cups-drivers"
        uses: redhat-actions/push-to-registry@v2
        id: push-cups-drivers
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.cups-drivers

      - name: "Sign container: cups-drivers"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-cups-drivers.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: distrobox"
        uses: redhat-actions/push-to-registry@v2
        id: push-distrobox
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.distrobox

      - name: "Sign container: distrobox"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-distrobox.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: docker-ce"
        uses: redhat-actions/push-to-registry@v2
        id: push-docker-ce
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.docker-ce

      - name: "Sign container: docker-ce"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-docker-ce.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: emacs"
        uses: redhat-actions/push-to-registry@v2
        id: push-emacs
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.emacs

      - name: "Sign container: emacs"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-emacs.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: erofs-utils"
        uses: redhat-actions/push-to-registry@v2
        id: push-erofs-utils
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.erofs-utils

      - name: "Sign container: erofs-utils"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-erofs-utils.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: fuse2"
        uses: redhat-actions/push-to-registry@v2
        id: push-fuse2
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.fuse2

      - name: "Sign container: fuse2"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-fuse2.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: gdb"
        uses: redhat-actions/push-to-registry@v2
        id: push-gdb
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.gdb

      - name: "Sign container: gdb"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-gdb.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: git-tools"
        uses: redhat-actions/push-to-registry@v2
        id: push-git-tools
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.git-tools

      - name: "Sign container: git-tools"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-git-tools.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: google-chrome"
        uses: redhat-actions/push-to-registry@v2
        id: push-google-chrome
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.google-chrome

      - name: "Sign container: google-chrome"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-google-chrome.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: htop"
        uses: redhat-actions/push-to-registry@v2
        id: push-htop
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.htop

      - name: "Sign container: htop"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-htop.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: incus"
        uses: redhat-actions/push-to-registry@v2
        id: push-incus
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.incus

      - name: "Sign container: incus"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-incus.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: iwd"
        uses: redhat-actions/push-to-registry@v2
        id: push-iwd
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.iwd

      - name: "Sign container: iwd"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-iwd.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: just"
        uses: redhat-actions/push-to-registry@v2
        id: push-just
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.just

      - name: "Sign container: just"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-just.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: keepassxc"
        uses: redhat-actions/push-to-registry@v2
        id: push-keepassxc
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.keepassxc

      - name: "Sign container: keepassxc"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-keepassxc.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: krb5-workstation"
        uses: redhat-actions/push-to-registry@v2
        id: push-krb5-workstation
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.krb5-workstation

      - name: "Sign container: krb5-workstation"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-krb5-workstation.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: libvirtd-desktop"
        uses: redhat-actions/push-to-registry@v2
        id: push-libvirtd-desktop
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.libvirtd-desktop

      - name: "Sign container: libvirtd-desktop"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-libvirtd-desktop.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: microsoft-edge"
        uses: redhat-actions/push-to-registry@v2
        id: push-microsoft-edge
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.microsoft-edge

      - name: "Sign container: microsoft-edge"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-microsoft-edge.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: moby-engine"
        uses: redhat-actions/push-to-registry@v2
        id: push-moby-engine
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.moby-engine

      - name: "Sign container: moby-engine"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-moby-engine.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: monitoring"
        uses: redhat-actions/push-to-registry@v2
        id: push-monitoring
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.monitoring

      - name: "Sign container: monitoring"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-monitoring.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: mullvad-vpn"
        uses: redhat-actions/push-to-registry@v2
        id: push-mullvad-vpn
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.mullvad-vpn

      - name: "Sign container: mullvad-vpn"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-mullvad-vpn.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: neovim"
        uses: redhat-actions/push-to-registry@v2
        id: push-neovim
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.neovim

      - name: "Sign container: neovim"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-neovim.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: openh264"
        uses: redhat-actions/push-to-registry@v2
        id: push-openh264
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.openh264

      - name: "Sign container: openh264"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-openh264.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: ripgrep"
        uses: redhat-actions/push-to-registry@v2
        id: push-ripgrep
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.ripgrep

      - name: "Sign container: ripgrep"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-ripgrep.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: steam-devices"
        uses: redhat-actions/push-to-registry@v2
        id: push-steam-devices
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.steam-devices

      - name: "Sign container: steam-devices"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-steam-devices.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: steam"
        uses: redhat-actions/push-to-registry@v2
        id: push-steam
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.steam

      - name: "Sign container: steam"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-steam.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: strace"
        uses: redhat-actions/push-to-registry@v2
        id: push-strace
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.strace

      - name: "Sign container: strace"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-strace.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: tree"
        uses: redhat-actions/push-to-registry@v2
        id: push-tree
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.tree

      - name: "Sign container: tree"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-tree.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: vim"
        uses: redhat-actions/push-to-registry@v2
        id: push-vim
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.vim

      - name: "Sign container: vim"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-vim.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: vscode"
        uses: redhat-actions/push-to-registry@v2
        id: push-vscode
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.vscode

      - name: "Sign container: vscode"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-vscode.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: vscodium"
        uses: redhat-actions/push-to-registry@v2
        id: push-vscodium
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.vscodium

      - name: "Sign container: vscodium"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-vscodium.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: wireguard-tools"
        uses: redhat-actions/push-to-registry@v2
        id: push-wireguard-tools
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.wireguard-tools

      - name: "Sign container: wireguard-tools"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-wireguard-tools.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: wireshark"
        uses: redhat-actions/push-to-registry@v2
        id: push-wireshark
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.wireshark

      - name: "Sign container: wireshark"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-wireshark.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: zoxide"
        uses: redhat-actions/push-to-registry@v2
        id: push-zoxide
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.zoxide

      - name: "Sign container: zoxide"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-zoxide.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: zsh"
        uses: redhat-actions/push-to-registry@v2
        id: push-zsh
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.zsh

      - name: "Sign container: zsh"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-zsh.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

