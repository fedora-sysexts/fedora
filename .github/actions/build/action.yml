name: "Build and publish a sysext"
description: "Build and publish a systemd system extension under a versioned release"
inputs:
  sysext:
    description: "The sysext to build"
    required: true
  image:
    description: "The image to use as a base for the sysext"
    required: true

# This composite action needs the following environment variables to be set at
# the workflow or job level:
# - RELEASEURL: Mandatory, needed to fetch older releases
# - FORCE_REBUILD: Optional, used to force sysext's rebuild (and publication)

runs:
  using: "composite"
  steps:
    - name: "Build sysext if needed"
      env:
        SYSEXT: ${{ inputs.sysext }}
        IMAGE: ${{ inputs.image }}
        PR: ${{ github.event_name == 'pull_request' }}
      shell: bash
      run: |
        set -euxo pipefail

        cd "${SYSEXT}"

        # For PRs, only build if the content changed
        if [[ "${PR}" == "true" ]]; then
            diff="$(
              git diff origin/main HEAD --stat -- . ; \
              git diff origin/main HEAD --stat -- ../sysext.just
            )"
            if [[ -z "${diff}" ]]; then
                echo "Skipping: No changes for this sysext in this PR"
                exit 0
            fi
            echo "Detected changes for this sysext in this PR. Building."
            just build ${IMAGE}
            exit 0
        fi

        # Check if we are asked to force a rebuild
        if [ -n ${FORCE_REBUILD+x} ]; then
            if [[ "${FORCE_REBUILD}" == true ]]; then
                echo "Building (forced rebuild)"
                just build ${IMAGE}
                exit 0
            fi
        fi

        # Only build for releases if the inputs changed
        just prepare-build ${IMAGE}

        new="$(cat inputs | sha256sum)"

        VERSION_ID="$(cat ./version_id)"
        VERSION="$(cat ./version)"
        if [[ "$(uname -m)" == "x86_64" ]]; then
            ARCH="x86-64"
        elif [[ "$(uname -m)" == "aarch64" ]]; then
            ARCH="arm64"
        else
            echo "Unsupported architecture"
            exit 1
        fi
        TAGNAME="${SYSEXT}-${VERSION}-${VERSION_ID}-${ARCH}"

        echo "Fetching info from existing release: ${TAGNAME}"
        curl --location --fail --output inputs.old  "${RELEASEURL}/${TAGNAME}/inputs"  || touch inputs.old
        old="$(cat inputs.old | sha256sum)"

        if [[ "${new}" == "${old}" ]]; then
          echo "No changes in inputs since last release. Skipping."
          exit 0
        fi

        echo "Detected changes. Building new sysext for: ${TAGNAME}"
        just resume-build ${IMAGE}

    - name: "Publish sysext"
      env:
        SYSEXT: ${{ inputs.sysext }}
        GH_TOKEN: ${{ github.token }}
      if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
      shell: bash
      run: |
        set -euxo pipefail

        git config --global --add safe.directory "${PWD}"

        retry() {
            if [[ "${#}" -lt 3 ]]; then
                echo "retry usage: <number of tries> <time between retries> <command> ..."
                return 1
            fi
            tries="${1}"
            sleep="${2}"
            shift 2
            for i in $(seq 1 ${tries}); do
                if [[ ${i} -gt 1 ]]; then
                    # echo "[+] Command failed. Waiting for ${sleep} seconds"
                    sleep ${sleep}
                fi
                # echo "[+] Running (try: ${i}): ${@}"
                "${@}" && r=0 && break || r=$?
            done
            return $r
        }

        cd "${SYSEXT}"

        VERSION="$(cat ./version)"
        VERSION_ID="$(cat ./version_id)"
        if [[ "$(uname -m)" == "x86_64" ]]; then
            ARCH="x86-64"
        elif [[ "$(uname -m)" == "aarch64" ]]; then
            ARCH="arm64"
        else
            echo "Unsupported architecture"
            exit 1
        fi
        TAGNAME="${SYSEXT}-${VERSION}-${VERSION_ID}-${ARCH}"

        if [[ ! -f "./${TAGNAME}.raw" ]]; then
          echo "No sysext built. Skipping."
          exit 0
        fi

        echo "Creating new release for: ${TAGNAME}"

        sha256sum *.raw > SHA256SUMS

        {
        echo "Release:"
        echo "\`\`\`"
        cat ./SHA256SUMS
        echo "\`\`\`"
        echo ""
        echo "Built using container image:"
        echo "\`\`\`"
        cat ./digest
        echo "\`\`\`"
        echo ""
        echo "Built using input files:"
        echo "\`\`\`"
        cat ./inputs
        echo "\`\`\`"
        echo ""
        echo "Built using scripts:"
        echo "\`\`\`"
        cat ./scripts
        echo "\`\`\`"
        } > notes

        gh release delete \
          --cleanup-tag \
          --yes \
          "${TAGNAME}" \
          || true

        retry 3 30 gh release create \
          --title "${SYSEXT} ${VERSION} for Fedora ${VERSION_ID} (${ARCH})" \
          --notes-file notes \
          "${TAGNAME}" \
          --latest=false \
          ./*.raw ./SHA256SUMS ./inputs ./scripts ./digest
